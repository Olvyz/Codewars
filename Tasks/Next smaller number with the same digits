/*Write a function that takes a positive integer and returns the next smaller positive integer containing the same digits.

For example:

next_smaller(21) == 12
next_smaller(531) == 513
next_smaller(2071) == 2017
Return -1 (for Haskell: return Nothing, for Rust: return None), when there is no smaller number that contains the same digits. Also return -1 when the next smaller 
number with the same digits would require the leading digit to be zero.

next_smaller(9) == -1
next_smaller(135) == -1
next_smaller(1027) == -1  # 0721 is out since we don't write numbers with lleading zeros*/

def permute (array):
    if len(array) == 1:
        return [array]
    permutations = []
    for i in range(len(array)):
        perms = permute(array[:i] +array[i+1:])
        for p in perms:
            permutations.append([array[i], *p])
    return permutations

def next_smaller(n):
    arr = [x for x in str(n)]
    perms = permute(arr)
    new_arr = []
    for i in range (len(perms)):
        if perms[i][0] != '0':
            new_arr.append(int(''.join(perms[i])))
    new_arr = list(set(new_arr))
    new_arr.sort(reverse = True)
    print(new_arr)
    n_index = new_arr.index(n)
    if n_index+1 in range(len(new_arr)):
        return new_arr[n_index+1]
    else:
        return -1
